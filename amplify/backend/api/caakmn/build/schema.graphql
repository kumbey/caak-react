type File @aws_iam @aws_cognito_user_pools {
  id: ID!
  key: String!
  name: String!
  owner: String
  bucket: String!
  region: String!
  level: String!
  ext: String!
  url: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_iam @aws_cognito_user_pools {
  id: ID!
  firstname: String!
  lastname: String
  birthdate: String
  gender: String!
  pic_id: ID
  cover_pic_id: ID
  about: String
  is_public: Boolean
  status: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  pic: File @aws_iam @aws_cognito_user_pools
  cover_pic: File @aws_iam @aws_cognito_user_pools
  username(filter: ModelUsernameFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  aura: Aura! @aws_iam @aws_cognito_user_pools
}

type Username @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
}

type Aura @aws_iam @aws_cognito_user_pools {
  user_id: ID!
  point: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type FollowedUsers @aws_iam @aws_cognito_user_pools {
  user_id: ID!
  followed_user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserCategory @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  category_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  category: Category! @aws_iam @aws_cognito_user_pools
}

type Category @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  icon: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_iam @aws_cognito_user_pools {
  id: ID!
  title: String!
  subject: String
  file_id: ID!
  status: String!
  commentType: String!
  type: String!
  parent_id: ID
  user_id: ID!
  group_id: ID!
  category_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  order: Int
  file: File @aws_iam @aws_cognito_user_pools
  user: User @aws_iam @aws_cognito_user_pools
  category: Category @aws_iam @aws_cognito_user_pools
  subs(updatedAt: ModelStringKeyConditionInput, filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
  reactions(filter: ModelPostReactionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostReactionConnection @aws_iam @aws_cognito_user_pools
  group: Group @aws_iam @aws_cognito_user_pools
}

type Comment @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  post_id: ID!
  comment: String!
  status: String!
  type: String!
  parent_id: ID
  replyUserID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  replyTo: User @aws_iam @aws_cognito_user_pools
  post: Post! @aws_iam @aws_cognito_user_pools
  sub(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
}

type PostReaction @aws_iam @aws_cognito_user_pools {
  post_id: ID!
  user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ReportedPost @aws_iam @aws_cognito_user_pools {
  id: ID!
  reason: String!
  status: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  post: Post @aws_iam @aws_cognito_user_pools
  type: ReportType @aws_iam @aws_cognito_user_pools
}

type ReportType @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  status: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GroupUsers @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  group_id: ID!
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  group: Group! @aws_iam @aws_cognito_user_pools
}

type Group @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  category_id: ID!
  about: String
  founder_id: ID!
  rating: Float
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  cover: File @aws_iam @aws_cognito_user_pools
  founder: User @aws_iam @aws_cognito_user_pools
  category: Category! @aws_iam @aws_cognito_user_pools
  members(filter: ModelGroupUsersFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
}

type Query {
  getUserCustom(id: ID!): User @aws_iam @aws_cognito_user_pools
  getFile(id: ID!): File @aws_iam @aws_cognito_user_pools
  listFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String): ModelFileConnection @aws_iam @aws_cognito_user_pools
  getUser(id: ID!): User @aws_iam @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_iam @aws_cognito_user_pools
  getUsername(id: ID!): Username @aws_iam @aws_cognito_user_pools
  listUsernames(filter: ModelUsernameFilterInput, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  usernameByUser(user_id: ID, sortDirection: ModelSortDirection, filter: ModelUsernameFilterInput, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  getAura(user_id: ID!): Aura @aws_iam @aws_cognito_user_pools
  listAuras(user_id: ID, filter: ModelAuraFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelAuraConnection @aws_iam @aws_cognito_user_pools
  getFollowedUsers(user_id: ID!, followed_user_id: ID!): FollowedUsers @aws_iam @aws_cognito_user_pools
  listFollowedUsers(user_id: ID, followed_user_id: ModelIDKeyConditionInput, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  byFollowed(user_id: ID, sortDirection: ModelSortDirection, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  byFollowing(followed_user_id: ID, sortDirection: ModelSortDirection, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  getUserCategory(user_id: ID!, category_id: ID!): UserCategory @aws_iam @aws_cognito_user_pools
  listUserCategories(user_id: ID, category_id: ModelIDKeyConditionInput, filter: ModelUserCategoryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserCategoryConnection @aws_iam @aws_cognito_user_pools
  getCategory(id: ID!): Category @aws_iam @aws_cognito_user_pools
  listCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection @aws_iam @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_iam @aws_cognito_user_pools
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByType(type: String, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByGroup(group_id: ID, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByUser(user_id: ID, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getComment(id: ID!): Comment @aws_iam @aws_cognito_user_pools
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
  getPostReaction(post_id: ID!, user_id: ID!): PostReaction @aws_iam @aws_cognito_user_pools
  listPostReactions(post_id: ID, user_id: ModelIDKeyConditionInput, filter: ModelPostReactionFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostReactionConnection @aws_iam @aws_cognito_user_pools
  getReportedPost(id: ID!): ReportedPost @aws_iam @aws_cognito_user_pools
  listReportedPosts(filter: ModelReportedPostFilterInput, limit: Int, nextToken: String): ModelReportedPostConnection @aws_iam @aws_cognito_user_pools
  getReportType(id: ID!): ReportType @aws_iam @aws_cognito_user_pools
  listReportTypes(filter: ModelReportTypeFilterInput, limit: Int, nextToken: String): ModelReportTypeConnection @aws_iam @aws_cognito_user_pools
  getGroupUsers(user_id: ID!, group_id: ID!): GroupUsers @aws_iam @aws_cognito_user_pools
  listGroupUsers(user_id: ID, group_id: ModelIDKeyConditionInput, filter: ModelGroupUsersFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
  getGroupUsersByGroup(group_id: ID, sortDirection: ModelSortDirection, filter: ModelGroupUsersFilterInput, limit: Int, nextToken: String): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
  getGroup(id: ID!): Group @aws_iam @aws_cognito_user_pools
  listGroups(filter: ModelGroupFilterInput, limit: Int, nextToken: String): ModelGroupConnection @aws_iam @aws_cognito_user_pools
}

type Mutation {
  createUserCustom(input: CreateUserInputCustom!): User @aws_iam @aws_cognito_user_pools
  createFile(input: CreateFileInput!, condition: ModelFileConditionInput): File
  updateFile(input: UpdateFileInput!, condition: ModelFileConditionInput): File
  deleteFile(input: DeleteFileInput!, condition: ModelFileConditionInput): File
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createUsername(input: CreateUsernameInput!, condition: ModelUsernameConditionInput): Username
  updateUsername(input: UpdateUsernameInput!, condition: ModelUsernameConditionInput): Username
  deleteUsername(input: DeleteUsernameInput!, condition: ModelUsernameConditionInput): Username
  createAura(input: CreateAuraInput!, condition: ModelAuraConditionInput): Aura
  updateAura(input: UpdateAuraInput!, condition: ModelAuraConditionInput): Aura
  deleteAura(input: DeleteAuraInput!, condition: ModelAuraConditionInput): Aura
  createFollowedUsers(input: CreateFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  updateFollowedUsers(input: UpdateFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  deleteFollowedUsers(input: DeleteFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  createUserCategory(input: CreateUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  updateUserCategory(input: UpdateUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  deleteUserCategory(input: DeleteUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createPostReaction(input: CreatePostReactionInput!, condition: ModelPostReactionConditionInput): PostReaction
  updatePostReaction(input: UpdatePostReactionInput!, condition: ModelPostReactionConditionInput): PostReaction
  deletePostReaction(input: DeletePostReactionInput!, condition: ModelPostReactionConditionInput): PostReaction
  createReportedPost(input: CreateReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  updateReportedPost(input: UpdateReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  deleteReportedPost(input: DeleteReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  createReportType(input: CreateReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  updateReportType(input: UpdateReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  deleteReportType(input: DeleteReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  createGroupUsers(input: CreateGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  updateGroupUsers(input: UpdateGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  deleteGroupUsers(input: DeleteGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  createGroup(input: CreateGroupInput!, condition: ModelGroupConditionInput): Group
  updateGroup(input: UpdateGroupInput!, condition: ModelGroupConditionInput): Group
  deleteGroup(input: DeleteGroupInput!, condition: ModelGroupConditionInput): Group
}

input CreateUserInputCustom {
  id: ID
  firstname: String
  lastname: String
  birthdate: String
  gender: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFileConnection @aws_iam @aws_cognito_user_pools {
  items: [File]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelFileFilterInput {
  id: ModelIDInput
  key: ModelStringInput
  name: ModelStringInput
  owner: ModelStringInput
  bucket: ModelStringInput
  region: ModelStringInput
  level: ModelStringInput
  ext: ModelStringInput
  url: ModelStringInput
  and: [ModelFileFilterInput]
  or: [ModelFileFilterInput]
  not: ModelFileFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input CreateFileInput {
  id: ID
  key: String!
  name: String!
  owner: String
  bucket: String!
  region: String!
  level: String!
  ext: String!
  url: String
}

input UpdateFileInput {
  id: ID!
  key: String
  name: String
  owner: String
  bucket: String
  region: String
  level: String
  ext: String
  url: String
}

input DeleteFileInput {
  id: ID!
}

input ModelFileConditionInput {
  key: ModelStringInput
  name: ModelStringInput
  owner: ModelStringInput
  bucket: ModelStringInput
  region: ModelStringInput
  level: ModelStringInput
  ext: ModelStringInput
  url: ModelStringInput
  and: [ModelFileConditionInput]
  or: [ModelFileConditionInput]
  not: ModelFileConditionInput
}

type Subscription {
  onCreateFile: File @aws_subscribe(mutations: ["createFile"]) @aws_iam @aws_cognito_user_pools
  onUpdateFile: File @aws_subscribe(mutations: ["updateFile"]) @aws_iam @aws_cognito_user_pools
  onDeleteFile: File @aws_subscribe(mutations: ["deleteFile"]) @aws_iam @aws_cognito_user_pools
  onCreateUser: User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"]) @aws_iam @aws_cognito_user_pools
  onCreateUsername: Username @aws_subscribe(mutations: ["createUsername"]) @aws_iam @aws_cognito_user_pools
  onUpdateUsername: Username @aws_subscribe(mutations: ["updateUsername"]) @aws_iam @aws_cognito_user_pools
  onDeleteUsername: Username @aws_subscribe(mutations: ["deleteUsername"]) @aws_iam @aws_cognito_user_pools
  onCreateAura: Aura @aws_subscribe(mutations: ["createAura"]) @aws_iam @aws_cognito_user_pools
  onUpdateAura: Aura @aws_subscribe(mutations: ["updateAura"]) @aws_iam @aws_cognito_user_pools
  onDeleteAura: Aura @aws_subscribe(mutations: ["deleteAura"]) @aws_iam @aws_cognito_user_pools
  onCreateFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["createFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onUpdateFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["updateFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onDeleteFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["deleteFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onCreateUserCategory: UserCategory @aws_subscribe(mutations: ["createUserCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateUserCategory: UserCategory @aws_subscribe(mutations: ["updateUserCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteUserCategory: UserCategory @aws_subscribe(mutations: ["deleteUserCategory"]) @aws_iam @aws_cognito_user_pools
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"]) @aws_iam @aws_cognito_user_pools
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"]) @aws_iam @aws_cognito_user_pools
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"]) @aws_iam @aws_cognito_user_pools
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"]) @aws_iam @aws_cognito_user_pools
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"]) @aws_iam @aws_cognito_user_pools
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_iam @aws_cognito_user_pools
  onCreatePostReaction: PostReaction @aws_subscribe(mutations: ["createPostReaction"]) @aws_iam @aws_cognito_user_pools
  onUpdatePostReaction: PostReaction @aws_subscribe(mutations: ["updatePostReaction"]) @aws_iam @aws_cognito_user_pools
  onDeletePostReaction: PostReaction @aws_subscribe(mutations: ["deletePostReaction"]) @aws_iam @aws_cognito_user_pools
  onCreateReportedPost: ReportedPost @aws_subscribe(mutations: ["createReportedPost"]) @aws_iam @aws_cognito_user_pools
  onUpdateReportedPost: ReportedPost @aws_subscribe(mutations: ["updateReportedPost"]) @aws_iam @aws_cognito_user_pools
  onDeleteReportedPost: ReportedPost @aws_subscribe(mutations: ["deleteReportedPost"]) @aws_iam @aws_cognito_user_pools
  onCreateReportType: ReportType @aws_subscribe(mutations: ["createReportType"]) @aws_iam @aws_cognito_user_pools
  onUpdateReportType: ReportType @aws_subscribe(mutations: ["updateReportType"]) @aws_iam @aws_cognito_user_pools
  onDeleteReportType: ReportType @aws_subscribe(mutations: ["deleteReportType"]) @aws_iam @aws_cognito_user_pools
  onCreateGroupUsers: GroupUsers @aws_subscribe(mutations: ["createGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroupUsers: GroupUsers @aws_subscribe(mutations: ["updateGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroupUsers: GroupUsers @aws_subscribe(mutations: ["deleteGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onCreateGroup: Group @aws_subscribe(mutations: ["createGroup"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroup: Group @aws_subscribe(mutations: ["updateGroup"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroup: Group @aws_subscribe(mutations: ["deleteGroup"]) @aws_iam @aws_cognito_user_pools
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  birthdate: ModelStringInput
  gender: ModelStringInput
  pic_id: ModelIDInput
  cover_pic_id: ModelIDInput
  about: ModelStringInput
  is_public: ModelBooleanInput
  status: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  firstname: String!
  lastname: String
  birthdate: String
  gender: String!
  pic_id: ID
  cover_pic_id: ID
  about: String
  is_public: Boolean
  status: String!
}

input UpdateUserInput {
  id: ID!
  firstname: String
  lastname: String
  birthdate: String
  gender: String
  pic_id: ID
  cover_pic_id: ID
  about: String
  is_public: Boolean
  status: String
}

input DeleteUserInput {
  id: ID!
}

input ModelUserConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  birthdate: ModelStringInput
  gender: ModelStringInput
  pic_id: ModelIDInput
  cover_pic_id: ModelIDInput
  about: ModelStringInput
  is_public: ModelBooleanInput
  status: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type ModelUsernameConnection @aws_iam @aws_cognito_user_pools {
  items: [Username]
  nextToken: String
}

input ModelUsernameFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  and: [ModelUsernameFilterInput]
  or: [ModelUsernameFilterInput]
  not: ModelUsernameFilterInput
}

input CreateUsernameInput {
  id: ID
  user_id: ID!
}

input UpdateUsernameInput {
  id: ID!
  user_id: ID
}

input DeleteUsernameInput {
  id: ID!
}

input ModelUsernameConditionInput {
  user_id: ModelIDInput
  and: [ModelUsernameConditionInput]
  or: [ModelUsernameConditionInput]
  not: ModelUsernameConditionInput
}

type ModelAuraConnection @aws_iam @aws_cognito_user_pools {
  items: [Aura]
  nextToken: String
}

input ModelAuraFilterInput {
  user_id: ModelIDInput
  point: ModelIntInput
  and: [ModelAuraFilterInput]
  or: [ModelAuraFilterInput]
  not: ModelAuraFilterInput
}

input CreateAuraInput {
  user_id: ID!
  point: Int!
}

input UpdateAuraInput {
  user_id: ID!
  point: Int
}

input DeleteAuraInput {
  user_id: ID!
}

input ModelAuraConditionInput {
  point: ModelIntInput
  and: [ModelAuraConditionInput]
  or: [ModelAuraConditionInput]
  not: ModelAuraConditionInput
}

type ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools {
  items: [FollowedUsers]
  nextToken: String
}

input ModelFollowedUsersFilterInput {
  user_id: ModelIDInput
  followed_user_id: ModelIDInput
  and: [ModelFollowedUsersFilterInput]
  or: [ModelFollowedUsersFilterInput]
  not: ModelFollowedUsersFilterInput
}

input CreateFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input UpdateFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input DeleteFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input ModelFollowedUsersConditionInput {
  and: [ModelFollowedUsersConditionInput]
  or: [ModelFollowedUsersConditionInput]
  not: ModelFollowedUsersConditionInput
}

type ModelUserCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [UserCategory]
  nextToken: String
}

input ModelUserCategoryFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  category_id: ModelIDInput
  and: [ModelUserCategoryFilterInput]
  or: [ModelUserCategoryFilterInput]
  not: ModelUserCategoryFilterInput
}

input CreateUserCategoryInput {
  id: ID
  user_id: ID!
  category_id: ID!
}

input UpdateUserCategoryInput {
  id: ID
  user_id: ID!
  category_id: ID!
}

input DeleteUserCategoryInput {
  user_id: ID!
  category_id: ID!
}

input ModelUserCategoryConditionInput {
  and: [ModelUserCategoryConditionInput]
  or: [ModelUserCategoryConditionInput]
  not: ModelUserCategoryConditionInput
}

type ModelCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  icon: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  name: String!
  icon: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String
  icon: String
}

input DeleteCategoryInput {
  id: ID!
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  icon: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
}

type ModelPostConnection @aws_iam @aws_cognito_user_pools {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  subject: ModelStringInput
  file_id: ModelIDInput
  status: ModelStringInput
  commentType: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  user_id: ModelIDInput
  group_id: ModelIDInput
  category_id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  order: ModelIntInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  subject: String
  file_id: ID!
  status: String!
  commentType: String!
  type: String!
  parent_id: ID
  user_id: ID!
  group_id: ID!
  category_id: ID!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  order: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  subject: String
  file_id: ID
  status: String
  commentType: String
  type: String
  parent_id: ID
  user_id: ID
  group_id: ID
  category_id: ID
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  order: Int
}

input DeletePostInput {
  id: ID!
}

input ModelPostConditionInput {
  title: ModelStringInput
  subject: ModelStringInput
  file_id: ModelIDInput
  status: ModelStringInput
  commentType: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  user_id: ModelIDInput
  group_id: ModelIDInput
  category_id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  order: ModelIntInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

type ModelCommentConnection @aws_iam @aws_cognito_user_pools {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  post_id: ModelIDInput
  comment: ModelStringInput
  status: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  replyUserID: ModelIDInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  user_id: ID!
  post_id: ID!
  comment: String!
  status: String!
  type: String!
  parent_id: ID
  replyUserID: ID
}

input UpdateCommentInput {
  id: ID!
  user_id: ID
  post_id: ID
  comment: String
  status: String
  type: String
  parent_id: ID
  replyUserID: ID
}

input DeleteCommentInput {
  id: ID!
}

input ModelCommentConditionInput {
  user_id: ModelIDInput
  post_id: ModelIDInput
  comment: ModelStringInput
  status: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  replyUserID: ModelIDInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelPostReactionConnection @aws_iam @aws_cognito_user_pools {
  items: [PostReaction]
  nextToken: String
}

input ModelPostReactionFilterInput {
  post_id: ModelIDInput
  user_id: ModelIDInput
  and: [ModelPostReactionFilterInput]
  or: [ModelPostReactionFilterInput]
  not: ModelPostReactionFilterInput
}

input CreatePostReactionInput {
  post_id: ID!
  user_id: ID!
}

input UpdatePostReactionInput {
  post_id: ID!
  user_id: ID!
}

input DeletePostReactionInput {
  post_id: ID!
  user_id: ID!
}

input ModelPostReactionConditionInput {
  and: [ModelPostReactionConditionInput]
  or: [ModelPostReactionConditionInput]
  not: ModelPostReactionConditionInput
}

type ModelReportedPostConnection @aws_iam @aws_cognito_user_pools {
  items: [ReportedPost]
  nextToken: String
}

input ModelReportedPostFilterInput {
  id: ModelIDInput
  reason: ModelStringInput
  status: ModelStringInput
  and: [ModelReportedPostFilterInput]
  or: [ModelReportedPostFilterInput]
  not: ModelReportedPostFilterInput
}

input CreateReportedPostInput {
  id: ID
  reason: String!
  status: String
  reportedPostPostId: ID
  reportedPostUserId: ID
  reportedPostTypeId: ID
}

input UpdateReportedPostInput {
  id: ID!
  reason: String
  status: String
  reportedPostPostId: ID
  reportedPostUserId: ID
  reportedPostTypeId: ID
}

input DeleteReportedPostInput {
  id: ID!
}

input ModelReportedPostConditionInput {
  reason: ModelStringInput
  status: ModelStringInput
  and: [ModelReportedPostConditionInput]
  or: [ModelReportedPostConditionInput]
  not: ModelReportedPostConditionInput
}

type ModelReportTypeConnection @aws_iam @aws_cognito_user_pools {
  items: [ReportType]
  nextToken: String
}

input ModelReportTypeFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelReportTypeFilterInput]
  or: [ModelReportTypeFilterInput]
  not: ModelReportTypeFilterInput
}

input CreateReportTypeInput {
  id: ID
  name: String!
  status: String!
  description: String
}

input UpdateReportTypeInput {
  id: ID!
  name: String
  status: String
  description: String
}

input DeleteReportTypeInput {
  id: ID!
}

input ModelReportTypeConditionInput {
  name: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelReportTypeConditionInput]
  or: [ModelReportTypeConditionInput]
  not: ModelReportTypeConditionInput
}

type ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupUsers]
  nextToken: String
}

input ModelGroupUsersFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  group_id: ModelIDInput
  role: ModelStringInput
  and: [ModelGroupUsersFilterInput]
  or: [ModelGroupUsersFilterInput]
  not: ModelGroupUsersFilterInput
}

input CreateGroupUsersInput {
  id: ID
  user_id: ID!
  group_id: ID!
  role: String!
}

input UpdateGroupUsersInput {
  id: ID
  user_id: ID!
  group_id: ID!
  role: String
}

input DeleteGroupUsersInput {
  user_id: ID!
  group_id: ID!
}

input ModelGroupUsersConditionInput {
  role: ModelStringInput
  and: [ModelGroupUsersConditionInput]
  or: [ModelGroupUsersConditionInput]
  not: ModelGroupUsersConditionInput
}

type ModelGroupConnection @aws_iam @aws_cognito_user_pools {
  items: [Group]
  nextToken: String
}

input ModelGroupFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  category_id: ModelIDInput
  about: ModelStringInput
  founder_id: ModelIDInput
  rating: ModelFloatInput
  and: [ModelGroupFilterInput]
  or: [ModelGroupFilterInput]
  not: ModelGroupFilterInput
}

input CreateGroupInput {
  id: ID
  name: String!
  category_id: ID!
  about: String
  founder_id: ID!
  rating: Float
  groupCoverId: ID
}

input UpdateGroupInput {
  id: ID!
  name: String
  category_id: ID
  about: String
  founder_id: ID
  rating: Float
  groupCoverId: ID
}

input DeleteGroupInput {
  id: ID!
}

input ModelGroupConditionInput {
  name: ModelStringInput
  category_id: ModelIDInput
  about: ModelStringInput
  founder_id: ModelIDInput
  rating: ModelFloatInput
  and: [ModelGroupConditionInput]
  or: [ModelGroupConditionInput]
  not: ModelGroupConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
