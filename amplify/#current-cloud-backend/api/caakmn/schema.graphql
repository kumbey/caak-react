type File @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
    id: ID!
    key: String!
    name: String!
    owner: String
    bucket: String!
    region: String!
    level: String!
    ext: String!
    type: String
}

type User @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  id: ID!
  username: [Username]! @connection(keyName:"byUser", fields:["id"])
  firstname: String
  lastname: String
  nickname: String
  birthdate: String
  gender: String
  pic_id: ID
  pic: File @connection(fields:["pic_id"])
  cover_pic_id: ID
  cover_pic: File @connection(fields:["cover_pic_id"])
  about: String
  aura: Aura! @connection(fields:["id"])
  is_public: Boolean
  status: String!
  category: [UserCategory] @connection(keyName:"byUser" ,fields:["id"])
}

type UserPostTotals @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  user_id: ID!
  pending: Int
  confirmed: Int
  archived: Int
  reported: Int
}

type GroupPostTotals @model(mutations: null)
@auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  group_id: ID!
  pending: Int
  confirmed: Int
}

type Username @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(name:"byUser" fields: ["user_id"], queryField:"usernameByUser"){
     id: ID!
     user_id: ID!
     user: User @connection(fields:["user_id"])
}

type Aura @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(fields:["user_id"]){
    user_id: ID!,
    point: Int!
}

type FollowedUsers @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(fields: ["user_id","followed_user_id"])
  @key(name: "byFollowed", fields: ["user_id"], queryField:"byFollowed")
  @key(name: "byFollowing", fields: ["followed_user_id"], queryField:"byFollowing"){
  user_id: ID!
  followed_user_id: ID!
}

type UserCategory @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(fields: ["user_id","category_id"])
  @key(name: "byUser", fields:["user_id"])
  @key(name: "byCategory", fields:["category_id"]){
  id: ID!
  user_id: ID!
  category_id: ID!
  category: Category! @connection(fields: ["category_id"])
}

type Category @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  id: ID!
  name: String!
  icon: String!
}

type Post @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(name: "byStatus", fields:["status","updatedAt"] , queryField:"getPostByStatus")
  @key(name: "byGroup", fields:["group_id","updatedAt"] , queryField:"getPostByGroup")
  @key(name: "byUser", fields:["user_id","updatedAt"] , queryField:"getPostByUser"){
  id: ID!
  title: String!
  commentType: Boolean!
  status: String!
  user_id: ID!
  user: User @connection(fields:["user_id"])
  group_id: ID!
  group: Group @connection(fields:["group_id"])
  category_id: ID!
  category: Category @connection(fields:["category_id"])
  comments: [Comment] @connection(keyName:"byPost", fields:["id"])
  items: [PostItems] @connection(keyName:"byPost", fields:["id"])
  updatedAt: AWSDateTime!
}

type PostItems @model(mutations: null)
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(name: "byPost", fields:["post_id","order"]){
  id: ID!
  post_id: ID!
  post: Post! @connection(fields:["post_id"])
  file_id: ID!
  file: File @connection(fields:["file_id"])
  title: String
  order: Int
}


type Comment @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(name: "byPost", fields: ["post_id"])
  @key(name: "byParent", fields: ["parent_id"]){
  id: ID!,
  user_id:ID!
  user: User @connection(fields:["user_id"])
  post_id: ID!
  post: Post! @connection(fields:["post_id"])
  comment: String!
  status: String!
  type: String!
  parent_id: ID
  sub: [Comment] @connection(keyName:"byParent" fields:["id"])
  replyUserID: ID
  replyTo: User @connection(fields:["replyUserID"])
}

type Reactions @model
   @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(fields: ["id","user_id"])
  @key(name:"byUser", fields:["user_id"]){
  id: ID!
  user_id: ID!
  type: String!
  on_to: String!
}

type ReportedPost @model
   @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  id: ID!
  post: Post @connection
  user: User @connection
  type: ReportType @connection
  reason: String!
  status: String
}

type ReportType @model
   @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  id: ID!
  name: String!
  status: String!
  description: String
}

type GroupUsers @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ])
  @key(fields: ["user_id","group_id"])
  @key(name: "byUser", fields: ["user_id"])
  @key(name: "byGroup", fields: ["group_id"], queryField:"getGroupUsersByGroup"){
  id: ID!
  user_id: ID!
  user: User @connection(fields:["user_id"])
  group_id: ID!
  group: Group! @connection(fields:["group_id"])
  role: String!
}

type Group @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
  id: ID!
  name: String!
  category_id: ID!
  category: Category! @connection(fields: ["category_id"])
  cover: File @connection
  about: String
  founder_id: ID!
  founder: User @connection(fields:["founder_id"])
  rating: Float
  members: [GroupUsers] @connection(keyName:"byGroup", fields:["id"])
}

type Notification @model
  @auth(rules: [
    { allow: groups, groups: ["users"], operations: [read, update, create, delete]}
    { allow: public, provider: iam, operations: [read]}
  ]){
    id: ID!
    type: String!
    from: ID!
    to: ID!
    group_id: ID
    post_id: ID
    group: Group @connection(fields:["group_id"])
    post: Post @connection(fields:["post_id"])
}

type Query {
  getUserCustom(id: ID!): User @function(name:"users-${env}")
  @aws_iam
  @aws_cognito_user_pools
}

type Mutation {
  createUserCustom(input: CreateUserInputCustom!): User @function(name:"users-${env}")
  createPost(input: CreatePostInput!): Post @function(name:"post-${env}")
  @aws_iam
  @aws_cognito_user_pools
}

input CreatePostInput{
  id: ID!
	title: String!
	commentType: Boolean!
  status: String!
	user_id: ID!
  group_id: ID!
  category_id: ID!
  items: [CreatePostItemsInput]
}

input CreatePostItemsInput{
  id: ID!
	title: String
	post_id: ID!
  file_id: ID!
	user_id: ID!
  order: Int!
}

input CreateUserInputCustom{
  id: ID
	firstname: String
	lastname: String
  nickname: String
	birthdate: String
}