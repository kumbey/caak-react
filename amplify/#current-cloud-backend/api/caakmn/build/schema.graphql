type File @aws_iam @aws_cognito_user_pools {
  id: ID!
  key: String!
  name: String!
  owner: String
  bucket: String!
  region: String!
  level: String!
  ext: String!
  type: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_iam @aws_cognito_user_pools {
  id: ID!
  firstname: String
  lastname: String
  nickname: String
  birthdate: String
  gender: String
  pic_id: ID
  cover_pic_id: ID
  about: String
  aura: Int
  is_public: Boolean
  status: String!
  followed: Boolean
  verified: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  pic: File @aws_iam @aws_cognito_user_pools
  cover_pic: File @aws_iam @aws_cognito_user_pools
  totals: UserTotals @aws_iam @aws_cognito_user_pools
  username(filter: ModelUsernameFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  category(filter: ModelUserCategoryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelUserCategoryConnection @aws_iam @aws_cognito_user_pools
}

type UserTotals @aws_iam @aws_cognito_user_pools {
  user_id: ID!
  pending: Int
  confirmed: Int
  archived: Int
  reported: Int
  drafted: Int
  following: Int
  followers: Int
  post_reactions: Int
  post_items_reactions: Int
  comment_reactions: Int
  unseen: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GroupTotals @aws_iam @aws_cognito_user_pools {
  group_id: ID!
  pending: Int
  confirmed: Int
  member: Int
  admin: Int
  moderator: Int
  unseen: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Username @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
}

type Aura @aws_iam @aws_cognito_user_pools {
  user_id: ID!
  point: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type FollowedUsers @aws_iam @aws_cognito_user_pools {
  user_id: ID!
  followed_user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type UserCategory @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  category_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  category: Category! @aws_iam @aws_cognito_user_pools
}

type Category @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  icon: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Post @aws_iam @aws_cognito_user_pools {
  id: ID!
  title: String!
  commentType: Boolean!
  status: String!
  user_id: ID!
  updated_user_id: ID!
  group_id: ID!
  category_id: ID!
  reacted: Boolean
  updatedAt: AWSDateTime!
  createdAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  updated_user: User @aws_iam @aws_cognito_user_pools
  category: Category @aws_iam @aws_cognito_user_pools
  items(order: ModelIntKeyConditionInput, filter: ModelPostItemsFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostItemsConnection @aws_iam @aws_cognito_user_pools
  totals: PostTotals @aws_iam @aws_cognito_user_pools
  group: Group @aws_iam @aws_cognito_user_pools
}

type PostItems @aws_iam @aws_cognito_user_pools {
  id: ID!
  post_id: ID!
  file_id: ID!
  title: String
  order: Int
  reacted: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  file: File @aws_iam @aws_cognito_user_pools
  post: Post! @aws_iam @aws_cognito_user_pools
  totals: PostItemsTotals @aws_iam @aws_cognito_user_pools
  comments(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
}

type PostTotals @aws_iam @aws_cognito_user_pools {
  post_id: ID!
  reactions: Int!
  views: Int!
  shares: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostItemsTotals @aws_iam @aws_cognito_user_pools {
  post_item_id: ID!
  reactions: Int!
  comments: Int!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostHistory @aws_iam @aws_cognito_user_pools {
  id: ID!
  post_id: ID!
  post: Post
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostViews @aws_iam @aws_cognito_user_pools {
  post_id: ID!
  user_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type PostShares @aws_iam @aws_cognito_user_pools {
  id: ID!
  post_id: ID!
  user_id: ID!
  description: String
  source: String
  link: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Comment @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  post_item_id: ID!
  comment: String!
  status: String!
  type: String!
  parent_id: ID
  replyUserID: ID
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  replyTo: User @aws_iam @aws_cognito_user_pools
  post_item: PostItems! @aws_iam @aws_cognito_user_pools
  sub(filter: ModelCommentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
  totals: CommentTotals @aws_iam @aws_cognito_user_pools
}

type CommentTotals @aws_iam @aws_cognito_user_pools {
  comment_id: ID!
  reactions: Int
  subs: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Reactions @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  type: String!
  on_to: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type ReportedPost @aws_iam @aws_cognito_user_pools {
  id: ID!
  reason: String!
  status: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  post: Post @aws_iam @aws_cognito_user_pools
  type: ReportType @aws_iam @aws_cognito_user_pools
}

type ReportType @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  status: String!
  description: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type GroupUsers @aws_iam @aws_cognito_user_pools {
  id: ID!
  user_id: ID!
  group_id: ID!
  role: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  user: User @aws_iam @aws_cognito_user_pools
  group: Group! @aws_iam @aws_cognito_user_pools
}

type Group @aws_iam @aws_cognito_user_pools {
  id: ID!
  name: String!
  category_id: ID!
  about: String
  founder_id: ID!
  rating: Float
  followed: Boolean
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  profile: File @aws_iam @aws_cognito_user_pools
  cover: File @aws_iam @aws_cognito_user_pools
  founder: User @aws_iam @aws_cognito_user_pools
  totals: GroupTotals @aws_iam @aws_cognito_user_pools
  category: Category! @aws_iam @aws_cognito_user_pools
  members(filter: ModelGroupUsersFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
}

type GroupID @aws_iam @aws_cognito_user_pools {
  id: ID!
  group_id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  group: Group @aws_iam @aws_cognito_user_pools
}

type Notification @aws_iam @aws_cognito_user_pools {
  id: ID!
  section: String!
  type: String!
  item_id: String
  action: String!
  from: ID!
  to: ID!
  seen: Boolean!
  updatedAt: AWSDateTime
  createdAt: AWSDateTime
  from_user: User @aws_iam @aws_cognito_user_pools
}

type Query {
  getUserCustom(id: ID!): User @aws_iam @aws_cognito_user_pools
  getFile(id: ID!): File @aws_iam @aws_cognito_user_pools
  listFiles(filter: ModelFileFilterInput, limit: Int, nextToken: String): ModelFileConnection @aws_iam @aws_cognito_user_pools
  getUser(id: ID!): User @aws_iam @aws_cognito_user_pools
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection @aws_iam @aws_cognito_user_pools
  getUserTotals(user_id: ID!): UserTotals @aws_iam @aws_cognito_user_pools
  listUserTotals(user_id: ID, filter: ModelUserTotalsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserTotalsConnection @aws_iam @aws_cognito_user_pools
  getGroupTotals(group_id: ID!): GroupTotals @aws_iam @aws_cognito_user_pools
  listGroupTotals(group_id: ID, filter: ModelGroupTotalsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelGroupTotalsConnection @aws_iam @aws_cognito_user_pools
  getUsername(id: ID!): Username @aws_iam @aws_cognito_user_pools
  listUsernames(filter: ModelUsernameFilterInput, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  usernameByUser(user_id: ID, sortDirection: ModelSortDirection, filter: ModelUsernameFilterInput, limit: Int, nextToken: String): ModelUsernameConnection @aws_iam @aws_cognito_user_pools
  getAura(user_id: ID!): Aura @aws_iam @aws_cognito_user_pools
  listAuras(user_id: ID, filter: ModelAuraFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelAuraConnection @aws_iam @aws_cognito_user_pools
  getFollowedUsers(user_id: ID!, followed_user_id: ID!): FollowedUsers @aws_iam @aws_cognito_user_pools
  listFollowedUsers(user_id: ID, followed_user_id: ModelIDKeyConditionInput, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  byFollowed(user_id: ID, sortDirection: ModelSortDirection, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  byFollowing(followed_user_id: ID, sortDirection: ModelSortDirection, filter: ModelFollowedUsersFilterInput, limit: Int, nextToken: String): ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools
  getUserCategory(user_id: ID!, category_id: ID!): UserCategory @aws_iam @aws_cognito_user_pools
  listUserCategories(user_id: ID, category_id: ModelIDKeyConditionInput, filter: ModelUserCategoryFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserCategoryConnection @aws_iam @aws_cognito_user_pools
  getCategory(id: ID!): Category @aws_iam @aws_cognito_user_pools
  listCategories(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection @aws_iam @aws_cognito_user_pools
  getPost(id: ID!): Post @aws_iam @aws_cognito_user_pools
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByStatus(status: String, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByGroup(group_id: ID, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostByUser(user_id: ID, updatedAt: ModelStringKeyConditionInput, sortDirection: ModelSortDirection, filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection @aws_iam @aws_cognito_user_pools
  getPostItems(id: ID!): PostItems @aws_iam @aws_cognito_user_pools
  listPostItems(filter: ModelPostItemsFilterInput, limit: Int, nextToken: String): ModelPostItemsConnection @aws_iam @aws_cognito_user_pools
  getPostTotals(post_id: ID!): PostTotals @aws_iam @aws_cognito_user_pools
  listPostTotals(post_id: ID, filter: ModelPostTotalsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostTotalsConnection @aws_iam @aws_cognito_user_pools
  getPostItemsTotals(post_item_id: ID!): PostItemsTotals @aws_iam @aws_cognito_user_pools
  listPostItemsTotals(post_item_id: ID, filter: ModelPostItemsTotalsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostItemsTotalsConnection @aws_iam @aws_cognito_user_pools
  getPostHistory(id: ID!): PostHistory @aws_iam @aws_cognito_user_pools
  listPostHistories(filter: ModelPostHistoryFilterInput, limit: Int, nextToken: String): ModelPostHistoryConnection @aws_iam @aws_cognito_user_pools
  getPostViews(post_id: ID!, user_id: ID!): PostViews @aws_iam @aws_cognito_user_pools
  listPostViews(post_id: ID, user_id: ModelIDKeyConditionInput, filter: ModelPostViewsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostViewsConnection @aws_iam @aws_cognito_user_pools
  getPostShares(id: ID!): PostShares @aws_iam @aws_cognito_user_pools
  listPostShares(filter: ModelPostSharesFilterInput, limit: Int, nextToken: String): ModelPostSharesConnection @aws_iam @aws_cognito_user_pools
  getComment(id: ID!): Comment @aws_iam @aws_cognito_user_pools
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
  getCommentsByPostItem(post_item_id: ID, sortDirection: ModelSortDirection, filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection @aws_iam @aws_cognito_user_pools
  getCommentTotals(comment_id: ID!): CommentTotals @aws_iam @aws_cognito_user_pools
  listCommentTotals(comment_id: ID, filter: ModelCommentTotalsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelCommentTotalsConnection @aws_iam @aws_cognito_user_pools
  getReactions(id: ID!, user_id: ID!): Reactions @aws_iam @aws_cognito_user_pools
  listReactions(id: ID, user_id: ModelIDKeyConditionInput, filter: ModelReactionsFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelReactionsConnection @aws_iam @aws_cognito_user_pools
  getReportedPost(id: ID!): ReportedPost @aws_iam @aws_cognito_user_pools
  listReportedPosts(filter: ModelReportedPostFilterInput, limit: Int, nextToken: String): ModelReportedPostConnection @aws_iam @aws_cognito_user_pools
  getReportType(id: ID!): ReportType @aws_iam @aws_cognito_user_pools
  listReportTypes(filter: ModelReportTypeFilterInput, limit: Int, nextToken: String): ModelReportTypeConnection @aws_iam @aws_cognito_user_pools
  getGroupUsers(user_id: ID!, group_id: ID!): GroupUsers @aws_iam @aws_cognito_user_pools
  listGroupUsers(user_id: ID, group_id: ModelIDKeyConditionInput, filter: ModelGroupUsersFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
  getGroupUsersByGroup(group_id: ID, sortDirection: ModelSortDirection, filter: ModelGroupUsersFilterInput, limit: Int, nextToken: String): ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools
  getGroup(id: ID!): Group @aws_iam @aws_cognito_user_pools
  listGroups(filter: ModelGroupFilterInput, limit: Int, nextToken: String): ModelGroupConnection @aws_iam @aws_cognito_user_pools
  getGroupID(id: ID!): GroupID @aws_iam @aws_cognito_user_pools
  listGroupIDS(filter: ModelGroupIDFilterInput, limit: Int, nextToken: String): ModelGroupIDConnection @aws_iam @aws_cognito_user_pools
  groupByID(group_id: ID, sortDirection: ModelSortDirection, filter: ModelGroupIDFilterInput, limit: Int, nextToken: String): ModelGroupIDConnection @aws_iam @aws_cognito_user_pools
  getNotification(id: ID!): Notification @aws_iam @aws_cognito_user_pools
  listNotifications(filter: ModelNotificationFilterInput, limit: Int, nextToken: String): ModelNotificationConnection @aws_iam @aws_cognito_user_pools
}

type Mutation {
  createUserCustom(input: CreateUserInputCustom!): User @aws_iam @aws_cognito_user_pools
  createPost(input: CreatePostInput!): Post @aws_cognito_user_pools
  updatePost(input: UpdatePostInput!): Post @aws_cognito_user_pools
  updatePostStatus(input: UpdatePostStatusInput!): Post @aws_cognito_user_pools
  changedTotals(type: String!, id: ID!): ChangedTotalsType @aws_cognito_user_pools
  createFile(input: CreateFileInput!, condition: ModelFileConditionInput): File
  updateFile(input: UpdateFileInput!, condition: ModelFileConditionInput): File
  deleteFile(input: DeleteFileInput!, condition: ModelFileConditionInput): File
  createFollowedUsers(input: CreateFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  updateFollowedUsers(input: UpdateFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  deleteFollowedUsers(input: DeleteFollowedUsersInput!, condition: ModelFollowedUsersConditionInput): FollowedUsers
  createUserCategory(input: CreateUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  updateUserCategory(input: UpdateUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  deleteUserCategory(input: DeleteUserCategoryInput!, condition: ModelUserCategoryConditionInput): UserCategory
  createCategory(input: CreateCategoryInput!, condition: ModelCategoryConditionInput): Category
  updateCategory(input: UpdateCategoryInput!, condition: ModelCategoryConditionInput): Category
  deleteCategory(input: DeleteCategoryInput!, condition: ModelCategoryConditionInput): Category
  createPostViews(input: CreatePostViewsInput!, condition: ModelPostViewsConditionInput): PostViews
  updatePostViews(input: UpdatePostViewsInput!, condition: ModelPostViewsConditionInput): PostViews
  deletePostViews(input: DeletePostViewsInput!, condition: ModelPostViewsConditionInput): PostViews
  createPostShares(input: CreatePostSharesInput!, condition: ModelPostSharesConditionInput): PostShares
  updatePostShares(input: UpdatePostSharesInput!, condition: ModelPostSharesConditionInput): PostShares
  deletePostShares(input: DeletePostSharesInput!, condition: ModelPostSharesConditionInput): PostShares
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
  createCommentTotals(input: CreateCommentTotalsInput!, condition: ModelCommentTotalsConditionInput): CommentTotals
  updateCommentTotals(input: UpdateCommentTotalsInput!, condition: ModelCommentTotalsConditionInput): CommentTotals
  deleteCommentTotals(input: DeleteCommentTotalsInput!, condition: ModelCommentTotalsConditionInput): CommentTotals
  createReactions(input: CreateReactionsInput!, condition: ModelReactionsConditionInput): Reactions
  updateReactions(input: UpdateReactionsInput!, condition: ModelReactionsConditionInput): Reactions
  deleteReactions(input: DeleteReactionsInput!, condition: ModelReactionsConditionInput): Reactions
  createReportedPost(input: CreateReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  updateReportedPost(input: UpdateReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  deleteReportedPost(input: DeleteReportedPostInput!, condition: ModelReportedPostConditionInput): ReportedPost
  createReportType(input: CreateReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  updateReportType(input: UpdateReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  deleteReportType(input: DeleteReportTypeInput!, condition: ModelReportTypeConditionInput): ReportType
  createGroupUsers(input: CreateGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  updateGroupUsers(input: UpdateGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  deleteGroupUsers(input: DeleteGroupUsersInput!, condition: ModelGroupUsersConditionInput): GroupUsers
  createGroup(input: CreateGroupInput!, condition: ModelGroupConditionInput): Group
  updateGroup(input: UpdateGroupInput!, condition: ModelGroupConditionInput): Group
  deleteGroup(input: DeleteGroupInput!, condition: ModelGroupConditionInput): Group
  createNotification(input: CreateNotificationInput!, condition: ModelNotificationConditionInput): Notification
  updateNotification(input: UpdateNotificationInput!, condition: ModelNotificationConditionInput): Notification
  deleteNotification(input: DeleteNotificationInput!, condition: ModelNotificationConditionInput): Notification
}

type Subscription {
  onPostUpdate: Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
  onPostUpdateByUser(user_id: ID!): Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
  onPostUpdateByGroup(group_id: ID!): Post @aws_subscribe(mutations: ["updatePost"]) @aws_iam @aws_cognito_user_pools
  onPostCreate: Post @aws_subscribe(mutations: ["createPost"]) @aws_iam @aws_cognito_user_pools
  onPostCreateByUser(user_id: ID!): Post @aws_subscribe(mutations: ["createPost"]) @aws_iam @aws_cognito_user_pools
  onPostCreateByGroup(group_id: ID!): Post @aws_subscribe(mutations: ["createPost"]) @aws_iam @aws_cognito_user_pools
  onPostStatusUpdate: Post @aws_subscribe(mutations: ["updatePostStatus"]) @aws_iam @aws_cognito_user_pools
  onCreateFile: File @aws_subscribe(mutations: ["createFile"]) @aws_iam @aws_cognito_user_pools
  onUpdateFile: File @aws_subscribe(mutations: ["updateFile"]) @aws_iam @aws_cognito_user_pools
  onDeleteFile: File @aws_subscribe(mutations: ["deleteFile"]) @aws_iam @aws_cognito_user_pools
  onCreateFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["createFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onUpdateFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["updateFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onDeleteFollowedUsers: FollowedUsers @aws_subscribe(mutations: ["deleteFollowedUsers"]) @aws_iam @aws_cognito_user_pools
  onCreateUserCategory: UserCategory @aws_subscribe(mutations: ["createUserCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateUserCategory: UserCategory @aws_subscribe(mutations: ["updateUserCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteUserCategory: UserCategory @aws_subscribe(mutations: ["deleteUserCategory"]) @aws_iam @aws_cognito_user_pools
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"]) @aws_iam @aws_cognito_user_pools
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"]) @aws_iam @aws_cognito_user_pools
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"]) @aws_iam @aws_cognito_user_pools
  onCreatePostViews: PostViews @aws_subscribe(mutations: ["createPostViews"]) @aws_iam @aws_cognito_user_pools
  onUpdatePostViews: PostViews @aws_subscribe(mutations: ["updatePostViews"]) @aws_iam @aws_cognito_user_pools
  onDeletePostViews: PostViews @aws_subscribe(mutations: ["deletePostViews"]) @aws_iam @aws_cognito_user_pools
  onCreatePostShares: PostShares @aws_subscribe(mutations: ["createPostShares"]) @aws_iam @aws_cognito_user_pools
  onUpdatePostShares: PostShares @aws_subscribe(mutations: ["updatePostShares"]) @aws_iam @aws_cognito_user_pools
  onDeletePostShares: PostShares @aws_subscribe(mutations: ["deletePostShares"]) @aws_iam @aws_cognito_user_pools
  onCreateComment: Comment @aws_subscribe(mutations: ["createComment"]) @aws_iam @aws_cognito_user_pools
  onUpdateComment: Comment @aws_subscribe(mutations: ["updateComment"]) @aws_iam @aws_cognito_user_pools
  onDeleteComment: Comment @aws_subscribe(mutations: ["deleteComment"]) @aws_iam @aws_cognito_user_pools
  onCreateCommentTotals: CommentTotals @aws_subscribe(mutations: ["createCommentTotals"]) @aws_iam @aws_cognito_user_pools
  onUpdateCommentTotals: CommentTotals @aws_subscribe(mutations: ["updateCommentTotals"]) @aws_iam @aws_cognito_user_pools
  onDeleteCommentTotals: CommentTotals @aws_subscribe(mutations: ["deleteCommentTotals"]) @aws_iam @aws_cognito_user_pools
  onCreateReactions: Reactions @aws_subscribe(mutations: ["createReactions"]) @aws_iam @aws_cognito_user_pools
  onUpdateReactions: Reactions @aws_subscribe(mutations: ["updateReactions"]) @aws_iam @aws_cognito_user_pools
  onDeleteReactions: Reactions @aws_subscribe(mutations: ["deleteReactions"]) @aws_iam @aws_cognito_user_pools
  onCreateReportedPost: ReportedPost @aws_subscribe(mutations: ["createReportedPost"]) @aws_iam @aws_cognito_user_pools
  onUpdateReportedPost: ReportedPost @aws_subscribe(mutations: ["updateReportedPost"]) @aws_iam @aws_cognito_user_pools
  onDeleteReportedPost: ReportedPost @aws_subscribe(mutations: ["deleteReportedPost"]) @aws_iam @aws_cognito_user_pools
  onCreateReportType: ReportType @aws_subscribe(mutations: ["createReportType"]) @aws_iam @aws_cognito_user_pools
  onUpdateReportType: ReportType @aws_subscribe(mutations: ["updateReportType"]) @aws_iam @aws_cognito_user_pools
  onDeleteReportType: ReportType @aws_subscribe(mutations: ["deleteReportType"]) @aws_iam @aws_cognito_user_pools
  onCreateGroupUsers: GroupUsers @aws_subscribe(mutations: ["createGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroupUsers: GroupUsers @aws_subscribe(mutations: ["updateGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroupUsers: GroupUsers @aws_subscribe(mutations: ["deleteGroupUsers"]) @aws_iam @aws_cognito_user_pools
  onCreateGroup: Group @aws_subscribe(mutations: ["createGroup"]) @aws_iam @aws_cognito_user_pools
  onUpdateGroup: Group @aws_subscribe(mutations: ["updateGroup"]) @aws_iam @aws_cognito_user_pools
  onDeleteGroup: Group @aws_subscribe(mutations: ["deleteGroup"]) @aws_iam @aws_cognito_user_pools
  onCreateNotification: Notification @aws_subscribe(mutations: ["createNotification"]) @aws_iam @aws_cognito_user_pools
  onUpdateNotification: Notification @aws_subscribe(mutations: ["updateNotification"]) @aws_iam @aws_cognito_user_pools
  onDeleteNotification: Notification @aws_subscribe(mutations: ["deleteNotification"]) @aws_iam @aws_cognito_user_pools
}

type ChangedTotalsType {
  type: String!
  totals: String!
}

input CreatePostInput {
  id: ID
  title: String
  commentType: Boolean
  status: String
  user_id: ID
  updated_user_id: ID
  group_id: ID!
  category_id: ID!
  items: [CreatePostItemsInput]
}

input UpdatePostInput {
  id: ID!
  title: String
  commentType: Boolean
  status: String
  user_id: ID
  updated_user_id: ID
  group_id: ID
  category_id: ID
  items: [CreatePostItemsInput]
}

input CreatePostItemsInput {
  id: ID
  title: String
  post_id: ID
  file_id: ID!
  user_id: ID
  order: Int
}

input UpdatePostStatusInput {
  id: ID!
  status: String!
}

input CreateUserInputCustom {
  id: ID
  firstname: String
  lastname: String
  nickname: String
  birthdate: String
  gender: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFileConnection @aws_iam @aws_cognito_user_pools {
  items: [File]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelFileFilterInput {
  id: ModelIDInput
  key: ModelStringInput
  name: ModelStringInput
  owner: ModelStringInput
  bucket: ModelStringInput
  region: ModelStringInput
  level: ModelStringInput
  ext: ModelStringInput
  type: ModelStringInput
  and: [ModelFileFilterInput]
  or: [ModelFileFilterInput]
  not: ModelFileFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input CreateFileInput {
  id: ID
  key: String!
  name: String!
  owner: String
  bucket: String!
  region: String!
  level: String!
  ext: String!
  type: String
}

input UpdateFileInput {
  id: ID!
  key: String
  name: String
  owner: String
  bucket: String
  region: String
  level: String
  ext: String
  type: String
}

input DeleteFileInput {
  id: ID!
}

input ModelFileConditionInput {
  key: ModelStringInput
  name: ModelStringInput
  owner: ModelStringInput
  bucket: ModelStringInput
  region: ModelStringInput
  level: ModelStringInput
  ext: ModelStringInput
  type: ModelStringInput
  and: [ModelFileConditionInput]
  or: [ModelFileConditionInput]
  not: ModelFileConditionInput
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  nickname: ModelStringInput
  birthdate: ModelStringInput
  gender: ModelStringInput
  pic_id: ModelIDInput
  cover_pic_id: ModelIDInput
  about: ModelStringInput
  aura: ModelIntInput
  is_public: ModelBooleanInput
  status: ModelStringInput
  followed: ModelBooleanInput
  verified: ModelBooleanInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type ModelUserTotalsConnection @aws_iam @aws_cognito_user_pools {
  items: [UserTotals]
  nextToken: String
}

input ModelUserTotalsFilterInput {
  user_id: ModelIDInput
  pending: ModelIntInput
  confirmed: ModelIntInput
  archived: ModelIntInput
  reported: ModelIntInput
  drafted: ModelIntInput
  following: ModelIntInput
  followers: ModelIntInput
  post_reactions: ModelIntInput
  post_items_reactions: ModelIntInput
  comment_reactions: ModelIntInput
  unseen: ModelIntInput
  and: [ModelUserTotalsFilterInput]
  or: [ModelUserTotalsFilterInput]
  not: ModelUserTotalsFilterInput
}

type ModelGroupTotalsConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupTotals]
  nextToken: String
}

input ModelGroupTotalsFilterInput {
  group_id: ModelIDInput
  pending: ModelIntInput
  confirmed: ModelIntInput
  member: ModelIntInput
  admin: ModelIntInput
  moderator: ModelIntInput
  unseen: ModelIntInput
  and: [ModelGroupTotalsFilterInput]
  or: [ModelGroupTotalsFilterInput]
  not: ModelGroupTotalsFilterInput
}

type ModelUsernameConnection @aws_iam @aws_cognito_user_pools {
  items: [Username]
  nextToken: String
}

input ModelUsernameFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  and: [ModelUsernameFilterInput]
  or: [ModelUsernameFilterInput]
  not: ModelUsernameFilterInput
}

type ModelAuraConnection @aws_iam @aws_cognito_user_pools {
  items: [Aura]
  nextToken: String
}

input ModelAuraFilterInput {
  user_id: ModelIDInput
  point: ModelIntInput
  and: [ModelAuraFilterInput]
  or: [ModelAuraFilterInput]
  not: ModelAuraFilterInput
}

type ModelFollowedUsersConnection @aws_iam @aws_cognito_user_pools {
  items: [FollowedUsers]
  nextToken: String
}

input ModelFollowedUsersFilterInput {
  user_id: ModelIDInput
  followed_user_id: ModelIDInput
  and: [ModelFollowedUsersFilterInput]
  or: [ModelFollowedUsersFilterInput]
  not: ModelFollowedUsersFilterInput
}

input CreateFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input UpdateFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input DeleteFollowedUsersInput {
  user_id: ID!
  followed_user_id: ID!
}

input ModelFollowedUsersConditionInput {
  and: [ModelFollowedUsersConditionInput]
  or: [ModelFollowedUsersConditionInput]
  not: ModelFollowedUsersConditionInput
}

type ModelUserCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [UserCategory]
  nextToken: String
}

input ModelUserCategoryFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  category_id: ModelIDInput
  and: [ModelUserCategoryFilterInput]
  or: [ModelUserCategoryFilterInput]
  not: ModelUserCategoryFilterInput
}

input CreateUserCategoryInput {
  id: ID
  user_id: ID!
  category_id: ID!
}

input UpdateUserCategoryInput {
  id: ID
  user_id: ID!
  category_id: ID!
}

input DeleteUserCategoryInput {
  user_id: ID!
  category_id: ID!
}

input ModelUserCategoryConditionInput {
  and: [ModelUserCategoryConditionInput]
  or: [ModelUserCategoryConditionInput]
  not: ModelUserCategoryConditionInput
}

type ModelCategoryConnection @aws_iam @aws_cognito_user_pools {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  icon: ModelStringInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  name: String!
  icon: String!
}

input UpdateCategoryInput {
  id: ID!
  name: String
  icon: String
}

input DeleteCategoryInput {
  id: ID!
}

input ModelCategoryConditionInput {
  name: ModelStringInput
  icon: ModelStringInput
  and: [ModelCategoryConditionInput]
  or: [ModelCategoryConditionInput]
  not: ModelCategoryConditionInput
}

type ModelPostConnection @aws_iam @aws_cognito_user_pools {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  commentType: ModelBooleanInput
  status: ModelStringInput
  user_id: ModelIDInput
  updated_user_id: ModelIDInput
  group_id: ModelIDInput
  category_id: ModelIDInput
  reacted: ModelBooleanInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

type ModelPostItemsConnection @aws_iam @aws_cognito_user_pools {
  items: [PostItems]
  nextToken: String
}

input ModelPostItemsFilterInput {
  id: ModelIDInput
  post_id: ModelIDInput
  file_id: ModelIDInput
  title: ModelStringInput
  order: ModelIntInput
  reacted: ModelBooleanInput
  and: [ModelPostItemsFilterInput]
  or: [ModelPostItemsFilterInput]
  not: ModelPostItemsFilterInput
}

type ModelPostTotalsConnection @aws_iam @aws_cognito_user_pools {
  items: [PostTotals]
  nextToken: String
}

input ModelPostTotalsFilterInput {
  post_id: ModelIDInput
  reactions: ModelIntInput
  views: ModelIntInput
  shares: ModelIntInput
  and: [ModelPostTotalsFilterInput]
  or: [ModelPostTotalsFilterInput]
  not: ModelPostTotalsFilterInput
}

type ModelPostItemsTotalsConnection @aws_iam @aws_cognito_user_pools {
  items: [PostItemsTotals]
  nextToken: String
}

input ModelPostItemsTotalsFilterInput {
  post_item_id: ModelIDInput
  reactions: ModelIntInput
  comments: ModelIntInput
  and: [ModelPostItemsTotalsFilterInput]
  or: [ModelPostItemsTotalsFilterInput]
  not: ModelPostItemsTotalsFilterInput
}

type ModelPostHistoryConnection @aws_iam @aws_cognito_user_pools {
  items: [PostHistory]
  nextToken: String
}

input ModelPostHistoryFilterInput {
  id: ModelIDInput
  post_id: ModelIDInput
  and: [ModelPostHistoryFilterInput]
  or: [ModelPostHistoryFilterInput]
  not: ModelPostHistoryFilterInput
}

type ModelPostViewsConnection @aws_iam @aws_cognito_user_pools {
  items: [PostViews]
  nextToken: String
}

input ModelPostViewsFilterInput {
  post_id: ModelIDInput
  user_id: ModelIDInput
  and: [ModelPostViewsFilterInput]
  or: [ModelPostViewsFilterInput]
  not: ModelPostViewsFilterInput
}

input CreatePostViewsInput {
  post_id: ID!
  user_id: ID!
}

input UpdatePostViewsInput {
  post_id: ID!
  user_id: ID!
}

input DeletePostViewsInput {
  post_id: ID!
  user_id: ID!
}

input ModelPostViewsConditionInput {
  and: [ModelPostViewsConditionInput]
  or: [ModelPostViewsConditionInput]
  not: ModelPostViewsConditionInput
}

type ModelPostSharesConnection @aws_iam @aws_cognito_user_pools {
  items: [PostShares]
  nextToken: String
}

input ModelPostSharesFilterInput {
  id: ModelIDInput
  post_id: ModelIDInput
  user_id: ModelIDInput
  description: ModelStringInput
  source: ModelStringInput
  link: ModelStringInput
  and: [ModelPostSharesFilterInput]
  or: [ModelPostSharesFilterInput]
  not: ModelPostSharesFilterInput
}

input CreatePostSharesInput {
  id: ID
  post_id: ID!
  user_id: ID!
  description: String
  source: String
  link: String
}

input UpdatePostSharesInput {
  id: ID!
  post_id: ID
  user_id: ID
  description: String
  source: String
  link: String
}

input DeletePostSharesInput {
  id: ID!
}

input ModelPostSharesConditionInput {
  post_id: ModelIDInput
  user_id: ModelIDInput
  description: ModelStringInput
  source: ModelStringInput
  link: ModelStringInput
  and: [ModelPostSharesConditionInput]
  or: [ModelPostSharesConditionInput]
  not: ModelPostSharesConditionInput
}

type ModelCommentConnection @aws_iam @aws_cognito_user_pools {
  items: [Comment]
  nextToken: String
}

input ModelCommentFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  post_item_id: ModelIDInput
  comment: ModelStringInput
  status: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  replyUserID: ModelIDInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
}

input CreateCommentInput {
  id: ID
  user_id: ID!
  post_item_id: ID!
  comment: String!
  status: String!
  type: String!
  parent_id: ID
  replyUserID: ID
}

input UpdateCommentInput {
  id: ID!
  user_id: ID
  post_item_id: ID
  comment: String
  status: String
  type: String
  parent_id: ID
  replyUserID: ID
}

input DeleteCommentInput {
  id: ID!
}

input ModelCommentConditionInput {
  user_id: ModelIDInput
  post_item_id: ModelIDInput
  comment: ModelStringInput
  status: ModelStringInput
  type: ModelStringInput
  parent_id: ModelIDInput
  replyUserID: ModelIDInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
}

type ModelCommentTotalsConnection @aws_iam @aws_cognito_user_pools {
  items: [CommentTotals]
  nextToken: String
}

input ModelCommentTotalsFilterInput {
  comment_id: ModelIDInput
  reactions: ModelIntInput
  subs: ModelIntInput
  and: [ModelCommentTotalsFilterInput]
  or: [ModelCommentTotalsFilterInput]
  not: ModelCommentTotalsFilterInput
}

input CreateCommentTotalsInput {
  comment_id: ID!
  reactions: Int
  subs: Int
}

input UpdateCommentTotalsInput {
  comment_id: ID!
  reactions: Int
  subs: Int
}

input DeleteCommentTotalsInput {
  comment_id: ID!
}

input ModelCommentTotalsConditionInput {
  reactions: ModelIntInput
  subs: ModelIntInput
  and: [ModelCommentTotalsConditionInput]
  or: [ModelCommentTotalsConditionInput]
  not: ModelCommentTotalsConditionInput
}

type ModelReactionsConnection @aws_iam @aws_cognito_user_pools {
  items: [Reactions]
  nextToken: String
}

input ModelReactionsFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  type: ModelStringInput
  on_to: ModelStringInput
  and: [ModelReactionsFilterInput]
  or: [ModelReactionsFilterInput]
  not: ModelReactionsFilterInput
}

input CreateReactionsInput {
  id: ID
  user_id: ID!
  type: String!
  on_to: String!
}

input UpdateReactionsInput {
  id: ID!
  user_id: ID!
  type: String
  on_to: String
}

input DeleteReactionsInput {
  id: ID!
  user_id: ID!
}

input ModelReactionsConditionInput {
  type: ModelStringInput
  on_to: ModelStringInput
  and: [ModelReactionsConditionInput]
  or: [ModelReactionsConditionInput]
  not: ModelReactionsConditionInput
}

type ModelReportedPostConnection @aws_iam @aws_cognito_user_pools {
  items: [ReportedPost]
  nextToken: String
}

input ModelReportedPostFilterInput {
  id: ModelIDInput
  reason: ModelStringInput
  status: ModelStringInput
  and: [ModelReportedPostFilterInput]
  or: [ModelReportedPostFilterInput]
  not: ModelReportedPostFilterInput
}

input CreateReportedPostInput {
  id: ID
  reason: String!
  status: String
  reportedPostPostId: ID
  reportedPostUserId: ID
  reportedPostTypeId: ID
}

input UpdateReportedPostInput {
  id: ID!
  reason: String
  status: String
  reportedPostPostId: ID
  reportedPostUserId: ID
  reportedPostTypeId: ID
}

input DeleteReportedPostInput {
  id: ID!
}

input ModelReportedPostConditionInput {
  reason: ModelStringInput
  status: ModelStringInput
  and: [ModelReportedPostConditionInput]
  or: [ModelReportedPostConditionInput]
  not: ModelReportedPostConditionInput
}

type ModelReportTypeConnection @aws_iam @aws_cognito_user_pools {
  items: [ReportType]
  nextToken: String
}

input ModelReportTypeFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelReportTypeFilterInput]
  or: [ModelReportTypeFilterInput]
  not: ModelReportTypeFilterInput
}

input CreateReportTypeInput {
  id: ID
  name: String!
  status: String!
  description: String
}

input UpdateReportTypeInput {
  id: ID!
  name: String
  status: String
  description: String
}

input DeleteReportTypeInput {
  id: ID!
}

input ModelReportTypeConditionInput {
  name: ModelStringInput
  status: ModelStringInput
  description: ModelStringInput
  and: [ModelReportTypeConditionInput]
  or: [ModelReportTypeConditionInput]
  not: ModelReportTypeConditionInput
}

type ModelGroupUsersConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupUsers]
  nextToken: String
}

input ModelGroupUsersFilterInput {
  id: ModelIDInput
  user_id: ModelIDInput
  group_id: ModelIDInput
  role: ModelStringInput
  and: [ModelGroupUsersFilterInput]
  or: [ModelGroupUsersFilterInput]
  not: ModelGroupUsersFilterInput
}

input CreateGroupUsersInput {
  id: ID
  user_id: ID!
  group_id: ID!
  role: String!
}

input UpdateGroupUsersInput {
  id: ID
  user_id: ID!
  group_id: ID!
  role: String
}

input DeleteGroupUsersInput {
  user_id: ID!
  group_id: ID!
}

input ModelGroupUsersConditionInput {
  role: ModelStringInput
  and: [ModelGroupUsersConditionInput]
  or: [ModelGroupUsersConditionInput]
  not: ModelGroupUsersConditionInput
}

type ModelGroupConnection @aws_iam @aws_cognito_user_pools {
  items: [Group]
  nextToken: String
}

input ModelGroupFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  category_id: ModelIDInput
  about: ModelStringInput
  founder_id: ModelIDInput
  rating: ModelFloatInput
  followed: ModelBooleanInput
  and: [ModelGroupFilterInput]
  or: [ModelGroupFilterInput]
  not: ModelGroupFilterInput
}

input CreateGroupInput {
  id: ID
  name: String!
  category_id: ID!
  about: String
  founder_id: ID!
  rating: Float
  followed: Boolean
  groupProfileId: ID
  groupCoverId: ID
}

input UpdateGroupInput {
  id: ID!
  name: String
  category_id: ID
  about: String
  founder_id: ID
  rating: Float
  followed: Boolean
  groupProfileId: ID
  groupCoverId: ID
}

input DeleteGroupInput {
  id: ID!
}

input ModelGroupConditionInput {
  name: ModelStringInput
  category_id: ModelIDInput
  about: ModelStringInput
  founder_id: ModelIDInput
  rating: ModelFloatInput
  followed: ModelBooleanInput
  and: [ModelGroupConditionInput]
  or: [ModelGroupConditionInput]
  not: ModelGroupConditionInput
}

type ModelGroupIDConnection @aws_iam @aws_cognito_user_pools {
  items: [GroupID]
  nextToken: String
}

input ModelGroupIDFilterInput {
  id: ModelIDInput
  group_id: ModelIDInput
  and: [ModelGroupIDFilterInput]
  or: [ModelGroupIDFilterInput]
  not: ModelGroupIDFilterInput
}

type ModelNotificationConnection @aws_iam @aws_cognito_user_pools {
  items: [Notification]
  nextToken: String
}

input ModelNotificationFilterInput {
  id: ModelIDInput
  section: ModelStringInput
  type: ModelStringInput
  item_id: ModelStringInput
  action: ModelStringInput
  from: ModelIDInput
  to: ModelIDInput
  seen: ModelBooleanInput
  updatedAt: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelNotificationFilterInput]
  or: [ModelNotificationFilterInput]
  not: ModelNotificationFilterInput
}

input CreateNotificationInput {
  id: ID
  section: String!
  type: String!
  item_id: String
  action: String!
  from: ID!
  to: ID!
  seen: Boolean!
  updatedAt: AWSDateTime
  createdAt: AWSDateTime
}

input UpdateNotificationInput {
  id: ID!
  section: String
  type: String
  item_id: String
  action: String
  from: ID
  to: ID
  seen: Boolean
  updatedAt: AWSDateTime
  createdAt: AWSDateTime
}

input DeleteNotificationInput {
  id: ID!
}

input ModelNotificationConditionInput {
  section: ModelStringInput
  type: ModelStringInput
  item_id: ModelStringInput
  action: ModelStringInput
  from: ModelIDInput
  to: ModelIDInput
  seen: ModelBooleanInput
  updatedAt: ModelStringInput
  createdAt: ModelStringInput
  and: [ModelNotificationConditionInput]
  or: [ModelNotificationConditionInput]
  not: ModelNotificationConditionInput
}

input ModelIDKeyConditionInput {
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  between: [ID]
  beginsWith: ID
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}

input ModelIntKeyConditionInput {
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}
